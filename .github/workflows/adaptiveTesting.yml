name: Test Notebooks

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string

jobs:
  find-notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebooks: ${{ steps.notebooks.outputs.notebooks }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Find all notebooks
      id: notebooks
      run: |
        # Find all notebooks under the notebooks/ folder and create a matrix
        notebooks=$(find notebooks/ -type f -name "*.ipynb")
        # Convert the space-separated notebook list into a JSON array
        echo "::set-output name=notebooks::[\"$(echo $notebooks | sed 's/ /", "/g')\"]"

  test-notebooks:
    needs: find-notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
    continue-on-error: true  # Allow other notebooks to continue even if one fails
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Python packages
      run: |
        # Install Jupyter, nbconvert, and any other required dependencies
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        pip install -r "$notebook_dir/requirements.txt"
      
    - name: Run memory and disk monitoring alongside notebook execution
      run: |
        # Function to monitor memory and disk usage
        monitor_resources() {
          while true; do
            memory_usage=$(free -m | grep Mem | awk '{print $3/$2 * 100.0}')
            disk_usage=$(df / | grep / | awk '{print $5}' | sed 's/%//')
            echo "Memory usage: ${memory_usage}%"
            echo "Disk usage: ${disk_usage}%"
  
            if (( $(echo "$memory_usage > 90" | bc -l) )) || [ "$disk_usage" -gt 90 ]; then
              echo "Resource usage exceeded 90%, stopping execution..."
              echo "RESOURCE_FAILURE=true" >> $GITHUB_ENV  # Set a flag indicating failure
              kill_process $JUPYTER_PID  # Kill the jupyter nbconvert process
              break  # Exit the monitoring loop
            fi
            sleep 10  # Wait 10 seconds before re-checking
          done
        }

        # Function to safely kill a process by its PID
        kill_process() {
          PID=$1
          if [ -z "$PID" ]; then
            echo "No PID provided. Skipping kill."
            return 0
          fi
          # Check if the process is running before attempting to kill it
          if pgrep -f $PID > /dev/null; then
            echo "Killing process with PID: $PID"
            kill $PID || echo "Failed to kill process, it may have already terminated"
          else
            echo "Process with PID: $PID not found or already terminated."
          fi
        }

        # Start monitoring in the background
        monitor_resources &
        MONITOR_PID=$!  # Capture the PID of the monitoring process
        echo "Started resource monitoring with PID: $MONITOR_PID"

        # Run the notebook in place (overwrite the original notebook) in the background
        notebook_path="${{ matrix.notebook }}"
        jupyter nbconvert --to notebook --execute "$notebook_path" &
        JUPYTER_PID=$!  # Capture the PID of the jupyter nbconvert process
        echo "Started jupyter nbconvert with PID: $JUPYTER_PID"

        # Wait for the Jupyter process to complete
        wait $JUPYTER_PID

        # Kill the background monitoring process after execution completes
        if [ -n "$MONITOR_PID" ]; then
          echo "Killing monitor process with PID: $MONITOR_PID"
          kill_process $MONITOR_PID
        fi

    - name: Handle resource failure and respawn runner
      if: env.RESOURCE_FAILURE == 'true'
      run: |
        notebook_path="${{ matrix.notebook }}"
        notebook_dir=$(dirname "$notebook_path")
        echo "Resource usage exceeded 90%, respawning runner for notebook: $notebook_path"
        
        # Try again with a larger runner (16GB)
        echo "runs-on: jwst-pipeline-notebooks-16gb" >> $GITHUB_ENV
        pip install -r "$notebook_dir/requirements.txt"
        jupyter nbconvert --to notebook --execute "$notebook_path"

    - name: Handle resource failure and respawn with 32GB if 16GB fails
      if: env.RESOURCE_FAILURE == 'true' && env.RUNNER == 'jwst-pipeline-notebooks-16gb'
      run: |
        notebook_path="${{ matrix.notebook }}"
        notebook_dir=$(dirname "$notebook_path")
        echo "16GB runner failed, respawning with 32GB runner for notebook: $notebook_path"
        
        # Try again with a larger runner (32GB)
        echo "runs-on: jwst-pipeline-notebooks-32gb" >> $GITHUB_ENV
        pip install -r "$notebook_dir/requirements.txt"
        jupyter nbconvert --to notebook --execute "$notebook_path"

    - name: Fail the test if all attempts fail
      if: env.RESOURCE_FAILURE == 'true' && env.RUNNER == 'jwst-pipeline-notebooks-32gb'
      run: |
        echo "Memory or disk usage exceeded 90% on all runners. Failing the test."
        exit 1
