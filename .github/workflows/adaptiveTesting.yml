name: Test Notebooks

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string

jobs:
  find-notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebooks: ${{ steps.notebooks.outputs.notebooks }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Find all notebooks
      id: notebooks
      run: |
        notebooks=$(find notebooks/ -type f -name "*.ipynb")
        echo "::set-output name=notebooks::[\"$(echo $notebooks | sed 's/ /", "/g')\"]"

  test-notebooks:
    needs: find-notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
    continue-on-error: true  # Allow other notebooks to continue even if one fails
    outputs:
      resource-failure: ${{ steps.test-result.outputs.resource-failure }}  # Set output flag for failure
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        pip install -r "$notebook_dir/requirements.txt"

    - name: Run memory and disk monitoring alongside notebook execution
      id: test-result
      run: |
        monitor_resources() {
          while true; do
            memory_usage=$(free -m | grep Mem | awk '{print $3/$2 * 100.0}')
            disk_usage=$(df / | grep / | awk '{print $5}' | sed 's/%//')
            echo "Memory usage: ${memory_usage}%"
            echo "Disk usage: ${disk_usage}%"
  
            if (( $(echo "$memory_usage > 90" | bc -l) )) || [ "$disk_usage" -gt 90 ]; then
              echo "Resource usage exceeded 90%, stopping execution..."
              echo "::set-output name=resource-failure::true"  # Set output resource failure flag
              kill_process $JUPYTER_PID
              break
            fi
            sleep 10
          done
        }

        kill_process() {
          PID=$1
          if [ -z "$PID" ]; then
            echo "No PID provided. Skipping kill."
            return 0
          fi
          if ps -p $PID > /dev/null; then
            kill $PID || echo "Failed to kill process."
          else
            echo "Process with PID: $PID already terminated."
          fi
        }

        monitor_resources &

        notebook_path="${{ matrix.notebook }}"
        jupyter nbconvert --to notebook --execute "$notebook_path" &
        JUPYTER_PID=$!

        wait $JUPYTER_PID

        if [ -n "$MONITOR_PID" ]; then
          kill_process $MONITOR_PID
        fi

  handle-resource-failure:
    if: ${{ needs.test-notebooks.outputs.resource-failure == 'true' }}
    runs-on: jwst-pipeline-notebooks-16gb
    needs: test-notebooks
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ needs.find-notebooks.outputs.notebooks }}")
        pip install -r "$notebook_dir/requirements.txt"

    - name: Retry the notebook execution
      run: |
        notebook_path="${{ needs.find-notebooks.outputs.notebooks }}"
        jupyter nbconvert --to notebook --execute "$notebook_path"

  handle-resource-failure-32gb:
    if: ${{ needs.handle-resource-failure.outputs.resource-failure == 'true' }}
    runs-on: jwst-pipeline-notebooks-32gb
    needs: handle-resource-failure
    steps:
    - name: Retry the notebook execution on a larger runner (32GB)
      run: |
        notebook_path="${{ needs.find-notebooks.outputs.notebooks }}"
        jupyter nbconvert --to notebook --execute "$notebook_path"

  fail-test:
    if: ${{ needs.handle-resource-failure-32gb.outputs.resource-failure == 'true' }}
    runs-on: ubuntu-latest
    needs: handle-resource-failure-32gb
    steps:
    - name: Fail the test if all attempts fail
      run: |
        echo "Memory or disk usage exceeded 90% on all runners. Failing the test."
        exit 1
