name: Test Notebooks

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string

jobs:
  find-notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebooks: ${{ steps.notebooks.outputs.notebooks }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Find all notebooks
      id: notebooks
      run: |
        echo "[]" > notebook_list.json
        find notebooks/ -type f -name "*.ipynb" 2>/dev/null | while IFS= read -r notebook; do
          jq --arg nb "$notebook" '. += [$nb]' notebook_list.json > tmp.json && mv tmp.json notebook_list.json
        done
        NOTEBOOKS=$(jq -c . notebook_list.json)
        if [ -z "$NOTEBOOKS" ] || [ "$NOTEBOOKS" = '[]' ]; then
          echo "No notebooks found in notebooks/ directory"
          NOTEBOOKS='[]'
        fi
        echo "notebooks=$NOTEBOOKS" >> $GITHUB_OUTPUT
        echo "Found notebooks: $NOTEBOOKS"
    - name: Debug output
      run: |
        echo "Notebooks output: ${{ steps.notebooks.outputs.notebooks }}"

  # Separate job for each notebook
  test-notebook:
    needs: find-notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
      fail-fast: false
    outputs:
      resource-failure: ${{ steps.execute.outputs.resource-failure }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        if [ -f "$notebook_dir/requirements.txt" ]; then
          pip install -r "$notebook_dir/requirements.txt"
        fi

    - name: Execute notebook with resource monitoring
      id: execute
      run: |
        execute_with_monitoring() {
          echo "Starting execution of ${{ matrix.notebook }}"
          
          timeout 3600 jupyter nbconvert --to notebook --execute "${{ matrix.notebook }}" \
            --output executed_notebook.ipynb \
            --ExecutePreprocessor.timeout=3000 --ExecutePreprocessor.allow_errors=false &
          JUPYTER_PID=$!
          
          RESOURCE_EXCEEDED=false
          while kill -0 $JUPYTER_PID 2>/dev/null; do
            memory_usage=$(free -m | awk '/Mem:/ {print $3/$2 * 100.0}')
            disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
            echo "Memory: ${memory_usage}% | Disk: ${disk_usage}%"
            
            if (( $(echo "$memory_usage > 90" | bc -l) )) || [ "$disk_usage" -gt 90 ]; then
              echo "Resource usage exceeded 90%, terminating..."
              kill -TERM $JUPYTER_PID
              sleep 5
              if kill -0 $JUPYTER_PID 2>/dev/null; then
                echo "Process still running, forcing termination..."
                kill -KILL $JUPYTER_PID
              fi
              wait $JUPYTER_PID || true
              RESOURCE_EXCEEDED=true
              break
            fi
            sleep 5
          done
          
          if [ "$RESOURCE_EXCEEDED" = "false" ]; then
            echo "Waiting for natural completion..."
            wait $JUPYTER_PID
            EXIT_CODE=$?
            if [ $EXIT_CODE -ne 0 ]; then
              echo "Notebook execution failed naturally (exit code: $EXIT_CODE)"
              echo "resource-failure=false" >> $GITHUB_OUTPUT
            else
              echo "Notebook completed successfully"
              echo "resource-failure=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Setting resource-failure=true for ${{ matrix.notebook }}"
            echo "resource-failure=true" >> $GITHUB_OUTPUT
          fi
          echo "Step completed for ${{ matrix.notebook }}"
        }

        trap 'if [ -n "$JUPYTER_PID" ] && kill -0 $JUPYTER_PID 2>/dev/null; then kill -TERM $JUPYTER_PID; sleep 2; kill -KILL $JUPYTER_PID 2>/dev/null || true; wait $JUPYTER_PID || true; fi' EXIT
        
        unset JUPYTER_PID
        execute_with_monitoring

    - name: Trigger 16GB retry on resource failure
      if: steps.execute.outputs.resource-failure == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'retry-16gb.yml',
            ref: 'main',
            inputs: {
              notebook: '${{ matrix.notebook }}',
              python_version: '${{ inputs.python-version }}'
            }
          });

# Separate workflow file: retry-16gb.yml
---
name: Retry 16GB

on:
  workflow_dispatch:
    inputs:
      notebook:
        description: 'Notebook to retry'
        required: true
      python_version:
        description: 'Python version to use'
        required: true

jobs:
  retry-16gb:
    runs-on: jwst-pipeline-notebooks-16gb
    outputs:
      resource-failure: ${{ steps.execute.outputs.resource-failure }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ inputs.notebook }}")
        if [ -f "$notebook_dir/requirements.txt" ]; then
          pip install -r "$notebook_dir/requirements.txt"
        fi

    - name: Execute notebook with resource monitoring
      id: execute
      run: |
        execute_with_monitoring() {
          echo "Starting execution of ${{ inputs.notebook }} on 16GB runner"
          jupyter nbconvert --to notebook --execute "${{ inputs.notebook }}" --output executed_notebook.ipynb \
            --ExecutePreprocessor.timeout=600 --ExecutePreprocessor.allow_errors=false &
          JUPYTER_PID=$!
          
          RESOURCE_EXCEEDED=false
          while kill -0 $JUPYTER_PID 2>/dev/null; do
            memory_usage=$(free -m | awk '/Mem:/ {print $3/$2 * 100.0}')
            disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
            echo "Memory: ${memory_usage}% | Disk: ${disk_usage}%"
            
            if (( $(echo "$memory_usage > 90" | bc -l) )) || [ "$disk_usage" -gt 90 ]; then
              echo "Resource usage exceeded 90%, terminating..."
              kill -TERM $JUPYTER_PID
              sleep 2
              wait $JUPYTER_PID || true
              RESOURCE_EXCEEDED=true
              break
            fi
            sleep 5
          done
          
          if [ "$RESOURCE_EXCEEDED" = "false" ]; then
            echo "Waiting for natural completion..."
            wait $JUPYTER_PID
            EXIT_CODE=$?
            if [ $EXIT_CODE -ne 0 ]; then
              echo "Notebook execution failed naturally (exit code: $EXIT_CODE)"
              echo "resource-failure=false" >> $GITHUB_OUTPUT
            else
              echo "Notebook completed successfully"
              echo "resource-failure=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Setting resource-failure=true for ${{ inputs.notebook }}"
            echo "resource-failure=true" >> $GITHUB_OUTPUT
          fi
        }

        trap 'if [ -n "$JUPYTER_PID" ] && kill -0 $JUPYTER_PID 2>/dev/null; then kill -TERM $JUPYTER_PID; sleep 2; kill -KILL $JUPYTER_PID 2>/dev/null || true; wait $JUPYTER_PID || true; fi' EXIT
        
        unset JUPYTER_PID
        execute_with_monitoring

    - name: Trigger 32GB retry on resource failure
      if: steps.execute.outputs.resource-failure ==
