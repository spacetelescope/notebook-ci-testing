name: Test Notebooks

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string

jobs:
  find-notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebooks: ${{ steps.notebooks.outputs.notebooks }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Find all notebooks
      id: notebooks
      run: |
        notebooks=$(find notebooks/ -type f -name "*.ipynb" | jq -R -s -c 'split("\n")[:-1]')
        echo "notebooks=$notebooks" >> $GITHUB_OUTPUT

  test-notebooks:
    needs: find-notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
    continue-on-error: true
    outputs:
      resource-failure: ${{ steps.test-result.outputs.resource-failure }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        if [ -f "$notebook_dir/requirements.txt" ]; then
          pip install -r "$notebook_dir/requirements.txt"
        fi

    - name: Run memory and disk monitoring alongside notebook execution
      id: test-result
      run: |
        monitor_resources() {
          while true; do
            memory_usage=$(free -m | awk '/Mem:/ {print $3/$2 * 100.0}')
            disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
            echo "Memory usage: ${memory_usage}%"
            echo "Disk usage: ${disk_usage}%"
            
            if (( $(echo "$memory_usage > 90" | bc -l) )) || [ "$disk_usage" -gt 90 ]; then
              echo "Resource usage exceeded 90%, stopping execution..."
              echo "resource-failure=true" >> $GITHUB_OUTPUT
              if [ -n "$JUPYTER_PID" ]; then
                kill -TERM "$JUPYTER_PID" 2>/dev/null || true
                wait "$JUPYTER_PID" 2>/dev/null || true
              fi
              exit 1
            fi
            sleep 10
          done
        }

        # Run the notebook in the background
        jupyter nbconvert --to notebook --execute "${{ matrix.notebook }}" --output executed_notebook.ipynb &
        JUPYTER_PID=$!
        
        # Start monitoring in the background
        monitor_resources &
        MONITOR_PID=$!

        # Wait for Jupyter to complete naturally
        wait $JUPYTER_PID
        EXIT_CODE=$?

        # Clean up monitoring process
        kill -TERM $MONITOR_PID 2>/dev/null || true
        wait $MONITOR_PID 2>/dev/null || true

        # Exit with the Jupyter exit code
        exit $EXIT_CODE

  handle-resource-failure:
    if: needs.test-notebooks.outputs.resource-failure == 'true'
    needs: test-notebooks
    runs-on: jwst-pipeline-notebooks-16gb
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        if [ -f "$notebook_dir/requirements.txt" ]; then
          pip install -r "$notebook_dir/requirements.txt"
        fi

    - name: Retry notebook execution
      run: |
        jupyter nbconvert --to notebook --execute "${{ matrix.notebook }}" --output executed_notebook.ipynb

  handle-resource-failure-32gb:
    if: failure() && needs.test-notebooks.outputs.resource-failure == 'true'
    needs: handle-resource-failure
    runs-on: jwst-pipeline-notebooks-32gb
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        if [ -f "$notebook_dir/requirements.txt" ]; then
          pip install -r "$notebook_dir/requirements.txt"
        fi

    - name: Retry notebook execution on 32GB runner
      run: |
        jupyter nbconvert --to notebook --execute "${{ matrix.notebook }}" --output executed_notebook.ipynb
