name: Test Notebooks

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: true
        type: string

jobs:
  find-notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebooks: ${{ steps.notebooks.outputs.notebooks }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Find all notebooks
      id: notebooks
      run: |
        notebooks=$(find notebooks/ -type f -name "*.ipynb" | jq -R -s -c 'split("\n")[:-1]')
        echo "notebooks=$notebooks" >> $GITHUB_OUTPUT

  test-notebook:
    needs: find-notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
      fail-fast: false
    outputs:
      resource-failures: ${{ steps.aggregate-outputs.outputs.resource-failures }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        if [ -f "$notebook_dir/requirements.txt" ]; then
          pip install -r "$notebook_dir/requirements.txt"
        fi

    - name: Execute notebook with resource monitoring
      id: execute
      run: |
        # Initialize failure tracking file if it doesn't exist
        if [ ! -f failures.json ]; then
          echo "{}" > failures.json
        fi

        execute_with_monitoring() {
          echo "Starting execution of ${{ matrix.notebook }}"
          
          timeout 3600 jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=3000 "${{ matrix.notebook }}" \
            --output executed_notebook.ipynb \
            --ExecutePreprocessor.timeout=600 --ExecutePreprocessor.allow_errors=false &
          JUPYTER_PID=$!
          
          RESOURCE_EXCEEDED=false
          while kill -0 $JUPYTER_PID 2>/dev/null; do
            memory_usage=$(free -m | awk '/Mem:/ {print $3/$2 * 100.0}')
            disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
            echo "Memory: ${memory_usage}% | Disk: ${disk_usage}%"
            
            if (( $(echo "$memory_usage > 90" | bc -l) )) || [ "$disk_usage" -gt 90 ]; then
              echo "Resource usage exceeded 90%, terminating..."
              kill -TERM $JUPYTER_PID
              sleep 5
              if kill -0 $JUPYTER_PID 2>/dev/null; then
                echo "Process still running, forcing termination..."
                kill -KILL $JUPYTER_PID
              fi
              wait $JUPYTER_PID || true
              RESOURCE_EXCEEDED=true
              break
            fi
            sleep 5
          done
          
          if [ "$RESOURCE_EXCEEDED" = "false" ]; then
            echo "Waiting for natural completion..."
            wait $JUPYTER_PID
            EXIT_CODE=$?
            if [ $EXIT_CODE -ne 0 ]; then
              echo "Notebook execution failed naturally (exit code: $EXIT_CODE)"
            else
              echo "Notebook completed successfully"
            fi
          else
            echo "Setting resource-failure=true for ${{ matrix.notebook }}"
            jq --arg notebook "${{ matrix.notebook }}" '. + {($notebook): true}' failures.json > tmp.json && mv tmp.json failures.json
          fi
          echo "Step completed for ${{ matrix.notebook }}"
        }

        trap 'if [ -n "$JUPYTER_PID" ] && kill -0 $JUPYTER_PID 2>/dev/null; then kill -TERM $JUPYTER_PID; sleep 2; kill -KILL $JUPYTER_PID 2>/dev/null || true; wait $JUPYTER_PID || true; fi' EXIT
        
        unset JUPYTER_PID
        execute_with_monitoring

    - name: Aggregate outputs
      id: aggregate-outputs
      run: |
        # Ensure failures.json exists
        if [ ! -f failures.json ]; then
          echo "{}" > failures.json
        fi
        # Compact JSON and set as output
        FAILURES=$(jq -c . failures.json)
        echo "resource-failures=$FAILURES" >> $GITHUB_OUTPUT
        echo "Aggregated resource failures: $FAILURES"

    - name: Debug outputs
      run: |
        echo "Resource failures: ${{ steps.aggregate-outputs.outputs.resource-failures }}"

  retry-16gb:
    needs: test-notebook
    if: needs.test-notebook.outputs.resource-failures != '{}'
    runs-on: jwst-pipeline-notebooks-16gb
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
      fail-fast: false
    outputs:
      resource-failures: ${{ steps.execute.outputs.resource-failures }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        if [ -f "$notebook_dir/requirements.txt" ]; then
          pip install -r "$notebook_dir/requirements.txt"
        fi

    - name: Check if this notebook needs retry
      id: check-retry
      run: |
        # Parse the JSON to check if this notebook failed
        FAILED=$(echo '${{ needs.test-notebook.outputs.resource-failures }}' | jq -r '."${{ matrix.notebook }}" // false')
        if [ "$FAILED" != "true" ]; then
          echo "Skipping ${{ matrix.notebook }} - no resource failure in previous run"
          exit 0
        fi
        echo "Proceeding with retry for ${{ matrix.notebook }}"

    - name: Execute notebook with resource monitoring
      id: execute
      if: steps.check-retry.outcome == 'success'
      run: |
        if [ ! -f failures.json ]; then
          echo "{}" > failures.json
        fi

        execute_with_monitoring() {
          echo "Starting execution of ${{ matrix.notebook }} on 16GB runner"
          jupyter nbconvert --to notebook --execute "${{ matrix.notebook }}" --ExecutePreprocessor.timeout=3000 --output executed_notebook.ipynb \
            --ExecutePreprocessor.timeout=600 --ExecutePreprocessor.allow_errors=false &
          JUPYTER_PID=$!
          
          RESOURCE_EXCEEDED=false
          while kill -0 $JUPYTER_PID 2>/dev/null; do
            memory_usage=$(free -m | awk '/Mem:/ {print $3/$2 * 100.0}')
            disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
            echo "Memory: ${memory_usage}% | Disk: ${disk_usage}%"
            
            if (( $(echo "$memory_usage > 90" | bc -l) )) || [ "$disk_usage" -gt 90 ]; then
              echo "Resource usage exceeded 90%, terminating..."
              kill -TERM $JUPYTER_PID
              sleep 2
              wait $JUPYTER_PID || true
              RESOURCE_EXCEEDED=true
              break
            fi
            sleep 5
          done
          
          if [ "$RESOURCE_EXCEEDED" = "false" ]; then
            echo "Waiting for natural completion..."
            wait $JUPYTER_PID
            EXIT_CODE=$?
            if [ $EXIT_CODE -ne 0 ]; then
              echo "Notebook execution failed naturally (not resource-related)"
              return $EXIT_CODE
            fi
            echo "Notebook completed successfully"
          else
            echo "Setting resource-failure=true for ${{ matrix.notebook }} on 16GB"
            jq --arg notebook "${{ matrix.notebook }}" '. + {($notebook): true}' failures.json > tmp.json && mv tmp.json failures.json
          fi
        }

        trap 'kill -TERM $JUPYTER_PID 2>/dev/null; wait $JUPYTER_PID 2>/dev/null || true' EXIT
        execute_with_monitoring
        FAILURES=$(jq -c . failures.json)
        echo "resource-failures=$FAILURES" >> $GITHUB_OUTPUT

  retry-32gb:
    needs: retry-16gb
    if: needs.retry-16gb.outputs.resource-failures != '{}'
    runs-on: jwst-pipeline-notebooks-32gb
    strategy:
      matrix:
        notebook: ${{ fromJson(needs.find-notebooks.outputs.notebooks) }}
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert
        notebook_dir=$(dirname "${{ matrix.notebook }}")
        if [ -f "$notebook_dir/requirements.txt" ]; then
          pip install -r "$notebook_dir/requirements.txt"
        fi

    - name: Check if this notebook needs retry
      id: check-retry
      run: |
        FAILED=$(echo '${{ needs.retry-16gb.outputs.resource-failures }}' | jq -r '."${{ matrix.notebook }}" // false')
        if [ "$FAILED" != "true" ]; then
          echo "Skipping ${{ matrix.notebook }} - no resource failure in 16GB run"
          exit 0
        fi
        echo "Proceeding with retry for ${{ matrix.notebook }}"

    - name: Execute notebook with resource monitoring
      id: execute
      if: steps.check-retry.outcome == 'success'
      run: |
        execute_with_monitoring() {
          echo "Starting execution of ${{ matrix.notebook }} on 32GB runner"
          jupyter nbconvert --to notebook --execute "${{ matrix.notebook }}" --ExecutePreprocessor.timeout=3000 --output executed_notebook.ipynb \
            --ExecutePreprocessor.timeout=600 --ExecutePreprocessor.allow_errors=false &
          JUPYTER_PID=$!
          
          while kill -0 $JUPYTER_PID 2>/dev/null; do
            memory_usage=$(free -m | awk '/Mem:/ {print $3/$2 * 100.0}')
            disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
            echo "Memory: ${memory_usage}% | Disk: ${disk_usage}%"
            
            if (( $(echo "$memory_usage > 90" | bc -l) )) || [ "$disk_usage" -gt 90 ]; then
              echo "Resource usage exceeded 90% on final runner, failing..."
              kill -TERM $JUPYTER_PID
              sleep 2
              wait $JUPYTER_PID || true
              return 1
            fi
            sleep 5
          done
          
          echo "Waiting for natural completion..."
          wait $JUPYTER_PID
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Notebook execution failed naturally (not resource-related)"
            return $EXIT_CODE
          fi
          echo "Notebook completed successfully"
          return 0
        }

        trap 'kill -TERM $JUPYTER_PID 2>/dev/null; wait $JUPYTER_PID 2>/dev/null || true' EXIT
        if ! execute_with_monitoring; then
          echo "Notebook failed on all runners"
          exit 1
        fi
