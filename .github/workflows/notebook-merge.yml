name: Build HTML on merge

on:
  pull_request_target:
    types: [closed]
    paths:
      - '**.ipynb'
      - '**.md'
      - '**.html'

env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}

jobs:
  prepare_matrix:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      notebooks: ${{ steps.set-matrix.outputs.notebooks }}
      assets: ${{ steps.set-matrix.outputs.assets }}
      nb_count: ${{ steps.set-matrix.outputs.nb_count }}
      asset_count: ${{ steps.set-matrix.outputs.asset_count }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - id: set-matrix
        shell: bash
        run: |
          # All changed files
          mapfile -t CHANGED < <(git diff --name-only \
            ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }})

          # Build arrays via jq to avoid empty/undefined edge cases
          json_all=$(printf '%s\n' "${CHANGED[@]}" | jq -R -s -c 'split("\n")|map(select(length>0))')

          notebooks=$(jq -c '[ .[] | select(test("\\.ipynb$")) ]' <<<"$json_all")
          assets=$(jq -c '[ .[] | select(test("\\.(md|MD|html|htm)$")) ]' <<<"$json_all")

          nb_count=$(jq 'length' <<<"$notebooks")
          asset_count=$(jq 'length' <<<"$assets")

          echo "notebooks=$notebooks" >> "$GITHUB_OUTPUT"
          echo "assets=$assets" >> "$GITHUB_OUTPUT"
          echo "nb_count=$nb_count" >> "$GITHUB_OUTPUT"
          echo "asset_count=$asset_count" >> "$GITHUB_OUTPUT"

  execute-notebooks:
    if: >
      github.event.pull_request.merged == true
      && needs.prepare_matrix.result == 'success'
      && fromJson(needs.prepare_matrix.outputs.nb_count) > 0
    needs: prepare_matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        notebooks: ${{ fromJson(needs.prepare_matrix.outputs.notebooks) }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up micromamba and install dependencies
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: hstcal
          create-args: >-
            -c conda-forge
            python=${{ vars.PYTHON_VERSION }}
            setuptools=65.5.1
            numpy=1.26.0
            hstcal
            jupyter
            pytest
            nbval
            nbconvert
            bandit

      - name: Set up Python ${{ vars.PYTHON_VERSION }}
        uses: astral-sh/setup-uv@v6.0.1
        with:
          version: "0.7.3"
          python-version: ${{ vars.PYTHON_VERSION }}
          enable-cache: true

      - name: Install dependencies
        env:
          PYDEVD_DISABLE_FILE_VALIDATION: 1
          SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL: True
        shell: bash
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal

          python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"

          if [ -f "$(dirname "${{ matrix.notebooks }}")/pre-install.sh" ]; then
            chmod +x "$(dirname "${{ matrix.notebooks }}")/pre-install.sh"
            "./$(dirname "${{ matrix.notebooks }}")/pre-install.sh"
          fi
          if [ -f "$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh" ]; then
            chmod +x "$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh"
            "./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh"
          fi
          if [ -f "$(dirname "${{ matrix.notebooks }}")/pre-requirements.txt" ]; then
            uv pip install --system --no-build-isolation -r "$(dirname "${{ matrix.notebooks }}")/pre-requirements.txt"
          fi
          if [ -f "$(dirname "${{ matrix.notebooks }}")/requirements.txt" ]; then
            uv pip install --system --no-build-isolation -r "$(dirname "${{ matrix.notebooks }}")/requirements.txt"
          fi

          uv pip install --system pytest nbval nbconvert bandit

      - name: Execute notebooks
        id: execute
        shell: bash
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal
          if ! jupyter nbconvert --to notebook --execute --inplace "${{ matrix.notebooks }}"; then
            python .github/scripts/insert_failure_message.py "${{ matrix.notebooks }}"
          fi

      - name: Commit modified notebook on current branch
        shell: bash
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'
          git add "${{ matrix.notebooks }}"
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}" || echo "No changes to commit."

      - name: Checkout only the file to the gh-storage branch
        shell: bash
        run: |
          git fetch origin gh-storage:gh-storage || git checkout -b gh-storage
          git checkout gh-storage
          git checkout @{-1} -- "${{ matrix.notebooks }}"

      - name: Commit and push notebook to gh-storage
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'
          git add "${{ matrix.notebooks }}"
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}" || echo "No changes to commit."
          MAX_RETRIES=5
          for i in $(seq 1 $MAX_RETRIES); do
            git push origin gh-storage --force && break || {
              echo "Push $i failed... retrying"
              sleep 10
            }
          done

  sync-static:
    if: >
      github.event.pull_request.merged == true
      && needs.prepare_matrix.result == 'success'
      && fromJson(needs.prepare_matrix.outputs.asset_count) > 0
    needs: prepare_matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        asset: ${{ fromJson(needs.prepare_matrix.outputs.assets) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Copy static file to gh-storage
        shell: bash
        env:
          FILE: ${{ matrix.asset }}
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'

          git fetch origin gh-storage:gh-storage || true
          git checkout gh-storage || git switch -c gh-storage
          git checkout ${{ github.event.pull_request.head.sha }} -- "$FILE"

          git add "$FILE"
          git commit -m "Sync static file $FILE to gh-storage" || echo "No changes to commit."

      - name: Push static file(s) to gh-storage
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MAX_RETRIES=5
          for i in $(seq 1 $MAX_RETRIES); do
            git push origin gh-storage --force && break || {
              echo "Push $i failed... retrying"
              sleep 10
            }
          done

  generate_html:
    if: always() && github.event.pull_request.merged == true
    needs: [prepare_matrix, execute-notebooks, sync-static]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bring gh-storage contents into workspace
        shell: bash
        run: |
          git fetch origin gh-storage
          git checkout origin/gh-storage -- .
          git status --porcelain

      - name: Set up Python ${{ vars.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install ghp-import
          pip install jupyter-book==0.15.1
          pip install myst-nb
          pip install astroid
          pip install nbval
          pip install jsonschema==4.6.0
          echo "PATH=${PATH}:${HOME}/.local/bin" >> $GITHUB_ENV

      - name: Build HTML
        run: |
          jupyter-book build .

      - name: GitHub Pages action
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_build/html
